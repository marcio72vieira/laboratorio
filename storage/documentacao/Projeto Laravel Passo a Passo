=============================
CONFIGURAÇÕES INICIAIS
============================

1 - Criar um projeto com o Laravel:
    composer create-project --prefer-dist laravel/laravel setres-estagio "8.5.*"
    
2 - Criar o arquivo .env 
    a) na raiz do projeto, executar o comando: cp .env.exemple ./.env

3 - Gerar uma chave para o app (projeto)
    a) php artisan key:generate

4 - Configurar tradução
    a) obter arquivo de configuração em: https://github.com/Upinside/laravel-pt-BR
    b) criar pasta resources/lang/pt-BR
    c) descompactar o arquivo obtido na pasta criada acima
    d) alterar a propriedade 'locale' para 'locale' => 'pt-br', em config/app.php

5 - Alterar a propriedade 'timezone' para 'timezone' => 'America/Sao_Paulo', em config/app.php

6 - Criar o banco de dados no MySQL ou Postgres (talvez) com a colation utf8mb4 (mais precisamente utf8mb4-unicode-ci)

7 - No arquivo App/Providers/AppServiceProvider.php acrescentar:
    a) importar: use Illuminate\Support\Facades\Schema
    b) public function resgister(){ 
          Schema::defaultStringLength(191);
       }

8 - Criar uma chave no arquivo .env, como se segue:
    a) FILESYSTEM_DRIVER=public

9 - Configurar as credenciais do banco de dados no arquivo .env, conforme necessário

10 - Caso sinta necessidade, só se for necessário, altere o namespace da sua aplicação com o comando:
     a) php artisan app:name Setres


     
=============================
CRIAÇÃO MÓDULO DE LOGIN
=============================

1 - Criar/Alterar migrations de User com campos conforme necessário
2 - Executar Migration
    a) php artisan migrate
    
3 - Criar controller de User
    a) php artisan make:controller Admin/UserController -r (cria o controller com todos os resources na pasta app/Http/Controllers/Admin)

4 - Criar requests User e definir as regras de validação.
    a) php artisan make:request UserCreateRequest. Alterar o retorno do método authorize desta request para true.
    b) php artisan make:request UserUpdateRequest. Alterar o retorno do método authorize desta request para true
    c) Importar os respectivos requests criados e utilizá-los nos respectivos métodos create e update do controller User.
    

5 - Criar rotas conforme necessário do tipo resource. Utilizar middleware também conforme necessário.
    a) use App\Http\Controllers\Admin\UserController;
    b) Route::resource('user', UserController::class);

6 - Criar view index.blade.php para listar usuários usuário;
7 - Implementar método index do UserCortroller para exibir view index.blade.php, não esquecer de importar modelo User
    a) use App\Models\User;
    b) $users = User::all();
       return view('admin.user.index', compact('users'));


==================================
CRIAÇÃO DE UM MÓDULO GENÉRICO
==================================

1 - Criar MIGRATIONS do recurso com os campos e seus tipos, bem como seus relacionamentos com outras tabelas, conforme necessário
    a php artisan make:migration create_recursos_table (obs: coloque o nome do recurso no plural)

2 - Criar o model do recurso
    a) php artisan make:model Recurso (obs: colocar o nome do model no singular com a primeira letra em maiúscula)
    b) definir os campos a serem preenchidos na propriedade $fillable = [], para serem preenchido em massa
    c) definir os relacionametos conforme necessário
    
3 - Executar a migration
    a) php artisan migrate
       
4 - Cirar as Requests para o recurso criado, e definir suas validações, conforme necessário
    a) php artisan make:request RecursoCreateRequest
    b) php artisan make:request RecursoUpdateRequest 

5 - Criar o controller do Recurso e definir seus métodos conforme necessário, bem como importar classes necessárias
    a) php artisan make:controller Admin/RecusoController --resource (obs: o parâmetro --resource, criar todos os métodos de um CRUD automaticamente)
    b) use App\Models\Recurso;
       use Illuminate\Support\Facades\DB;
       use App\Http\Requests\RecursoCreateRequest;
       use App\Http\Requests\RecursoUpdateRequest;
       use Illuminate\Support\Facades\Validator;
       use Illuminate\Validation\Rule;

6 - Crie a(s) rota(s) do recurso, conforme necessário
    a) use App\Http\Controllers\Admin\BairroController;
    b) Route::prefix('admin')->name('admin.')->group(function() {
          Route::resource('user', RecursoController::class);
       )}
    c) Quando necessário, acrescente o middleware se preciso for
           b) Route::prefix('admin')->name('admin.')->group(function() {
          Route::resource('user', RecursoController::class)->middleware(['auth']);
       )}

7 - Referenciar a rota do recurso no menu de navegação pelo seu nome (->name) conforme como nomeado no arquivo de rotas, quando for o caso

8 - Cirar as views (index.blade, create.blade, edit.blade, show.blade, outras.blade) conforme necessário
       
       
       
       
       
       
       
       
       
       
=========================
EXTRAS
=========================
1 - Site de Ícones: https://fontawesome.com/v4.7/icons/
2 - Site de imagens de capas svg: https://undraw.co/


==================================================
CAMPOS PARA CADASTRO DE EMPRESA DO SETRES-ESTÁGIO
==================================================
$table->string('cnpj');
$table->string('cnpjcartao');
$table->string('razaosocial');
$table->string('nomefantasia');
$table->string('codigocnae');
$table->string('banco');
$table->string('agencia');
$table->string('contatitularidade');
$table->string('logradouro');
$table->string('numero');
$table->string('complemento');
$table->string('bairro');
$table->string('cep');
$table->string('municipio');
$table->string('nome');
$table->string('cargo');
$table->string('emailpessoal');
$table->string('celular');
$table->string('telefoneum');
$table->string('telefonedois');
$table->string('emailempresarial');
$table->string('nomedois');
$table->string('cargodois');
$table->string('quantidadeestagiario');



